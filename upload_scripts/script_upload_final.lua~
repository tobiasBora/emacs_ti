#!/usr/bin/lua
-- From : https://github.com/jimbauwens/ETK/blob/master/buildtools/build.lua
-- Ce script regroupe la partie conversion et la partie d'envoie vers la
-- calculatrice.

BUILDERV = 0.2


print("TI-Nspire project builder v" .. BUILDERV)
print("(C) 2012 Jim Bauwens\r\n")

-- On vérifie qu'il y a le bon nombre d'arguments :
if #arg<2 then
   print"Usage: ./build.lua infile outfile.tns [send : true]"
   os.exit(0)
else
   -- On associe les noms, ou on affiche un message d'erreur :
   buildfilename = assert(arg[1], "You need to specify an input file name !")
   outfilename = assert(arg[2], "You need to specify an output file name !")
   
end

print("Project file:", buildfilename)

debug.traceback=nil

local luaout = ""
-- Pour compter le nombre de fichiers :
local luafiles = 0

-- Définie la fonction assert (? elle n'est pas officielle ?)
function assert(bool, errormsg)
   if not bool then
      error(errormsg or "", 0)
   end
   return bool
end

-- Pour obtenir le chemin du fichier :
function getPath(filename)
   local a,b,path = filename:find( "(.*%/).*%..*")
   return path or ""
end
--[[
   Sert à renvoyer le contenu d'un fichier ainsi que le contenu de ses
sous fichiers écrits dans ainsi :

-- Start of subfile.lua --
--------------------------
Contenu du fichier
------------------------
-- End of subfile.lua --
------------------------


--]]

function processFile(filename, path)
   -- On vérifie qu'on n'a pas inclu 100 fichiers
   luafiles = luafiles + 1
   assert(luafiles<=100, "Too many files to include! Are you sure you don't have an include loop?")

   local out = ""
   -- On ouvre le fichier passé en paramètres :
   local file = assert(io.open(filename, "r"), filename .. " could not be read! Aborting.")
   print("Processing " .. filename)
   -- On essaye de la compiler pour éviter les erreurs :
   -- assert(os.execute("luac -p " .. filename) == 0, filename .. " contains a syntax error! Aborting.")

   -- On enregistre son contenu :
   local filecontent = file:read("*a")
   file:close()
   
   -- Si le fichier en paramètre n'est pas le fichier principal, 
   if filename ~= buildfilename then
      local fileheader = "-- Start of " .. filename .. " --\r\n"
      local hbar = string.rep("-", #fileheader-2) .. "\r\n"
      local fileend = "-- End of " .. filename .. " --\r\n"
      local ebar = string.rep("-", #fileend-2) .. "\r\n"

      filecontent = hbar .. fileheader .. hbar .. filecontent .. ebar .. fileend .. ebar
   end
   -- # On remplace à chaque fois %-%-include "..." par le contenu du fichier :
   out = filecontent:gsub("%-%-include \"([^\"]*)\"", function (f) local f = path .. f return processFile(f, getPath(f)) end)
   return out
end

-- on créé le fichier final :
luaout = processFile(buildfilename, getPath(buildfilename))

print("\r\nSuccesully loaded " .. luafiles .. " lua files")

-- Créer le fichier temporaire :
local tmpname = "big." .. buildfilename
print("Creating temp file "..tmpname)

-- On y écrit le contenu du gros fichier :
local tmpfile = assert(io.open(tmpname, "w"), "Failed to create temp file. Are you sure you have permissions to the current directory ?")
tmpfile:write(luaout)
tmpfile:close()
-- On le "compile" en tns avec lua :
print("Trying to build project with Luna...")
assert(os.execute("cat " .. tmpname .. "|./luna - " .. outfilename), "Building failed! You can try to build " .. tmpname .. " manually")
print("\r\nBuilding successful!")
-- Partie à écrire soit même pour l'envoyer sur la TI :
-- A vérifier
if arg[3]=="true"
then
   assert(os.execute("./script_upload_to_ti.lua " .. outfilename)==0, "The file " .. tmpname .. " hasn't been send to the TI. Try manually.")
--
   print("Fichier envoyé !")
end
